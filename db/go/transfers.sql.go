// Code generated by sqlc. DO NOT EDIT.
// source: transfers.sql

package db

import (
	"context"
)

const createTransfer = `-- name: CreateTransfer :one
insert into transfers(
    amount,
    from_account_id,
    to_account_id
) values (
    $1, $2, $3
) returning id, amount, from_account_id, to_account_id, created_at
`

type CreateTransferParams struct {
	Amount        int64 `json:"amount"`
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfer, arg.Amount, arg.FromAccountID, arg.ToAccountID)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTransfer = `-- name: DeleteTransfer :exec
delete from transfers where id = $1
`

func (q *Queries) DeleteTransfer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTransfer, id)
	return err
}

const getTransfer = `-- name: GetTransfer :one
select id, amount, from_account_id, to_account_id, created_at from transfers
where id = $1 limit 1
`

func (q *Queries) GetTransfer(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.CreatedAt,
	)
	return i, err
}

const listTransfersFrom = `-- name: ListTransfersFrom :many
select id, amount, from_account_id, to_account_id, created_at from transfers
where id > $1 and from_account_id = $2
order by id
limit $3
`

type ListTransfersFromParams struct {
	ID            int64 `json:"id"`
	FromAccountID int64 `json:"from_account_id"`
	Limit         int32 `json:"limit"`
}

func (q *Queries) ListTransfersFrom(ctx context.Context, arg ListTransfersFromParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTransfersFrom, arg.ID, arg.FromAccountID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransfersTo = `-- name: ListTransfersTo :many
select id, amount, from_account_id, to_account_id, created_at from transfers
where id > $1 and to_account_id = $2
order by id
limit $3
`

type ListTransfersToParams struct {
	ID          int64 `json:"id"`
	ToAccountID int64 `json:"to_account_id"`
	Limit       int32 `json:"limit"`
}

func (q *Queries) ListTransfersTo(ctx context.Context, arg ListTransfersToParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTransfersTo, arg.ID, arg.ToAccountID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
